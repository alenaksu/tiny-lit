{"version":3,"sources":["src/Utilities.js","src/CustomElementInternals.js","src/CustomElementState.js","src/DocumentConstructionObserver.js","src/CustomElementRegistry.js","src/Deferred.js","src/Patch/Native.js","src/AlreadyConstructedMarker.js","src/Patch/Interface/ParentNode.js","src/custom-elements.js","src/Patch/HTMLElement.js","src/Patch/Document.js","src/Patch/DocumentFragment.js","src/Patch/Node.js","src/Patch/Element.js","src/Patch/Interface/ChildNode.js"],"names":["reservedTagList","Set","isValidCustomElementName","localName","reserved","has","validForm","test","isConnected","node","nativeValue","undefined","current","__CE_isImportDocument","Document","parentNode","window","ShadowRoot","host","nextSiblingOrAncestorSibling","root","start","nextSibling","walkDeepDescendantElements","callback","visitedImports","nodeType","Node","ELEMENT_NODE","element","getAttribute","importNode","import","add","child","firstChild","shadowRoot","__CE_shadowRoot","setPropertyUnchecked","destination","name","value","constructor","CustomElementInternals","_localNameToDefinition","Map","_constructorToDefinition","_patches","_hasPatches","addPatch","listener","push","patchTree","patch","__CE_patched","i","length","connectTree","elements","custom","__CE_state","connectedCallback","upgradeElement","disconnectTree","disconnectedCallback","patchAndUpgradeTree","options","upgrade","gatherElements","__CE_hasRegistry","readyState","__CE_documentLoadHandled","addEventListener","clonedVisitedImports","delete","ownerDocument","defaultView","definition","get","constructionStack","constructorFunction","Error","pop","e","failed","__CE_definition","attributeChangedCallback","observedAttributes","DocumentConstructionObserver","internals","doc","document","_internals","_document","_observer","MutationObserver","_handleMutations","bind","observe","childList","subtree","disconnect","Deferred","_resolve","_value","_promise","Promise","resolve","CustomElementRegistry","_elementDefinitionIsRunning","_whenDefinedDeferred","_flushCallback","this._flushCallback","fn","_flushPending","_pendingDefinitions","_documentConstructionObserver","call","oldValue","newValue","namespace","indexOf","mutations","addedNodes","j","define","Function","TypeError","SyntaxError","getCallback","callbackValue","prototype","Object","adoptedCallback","setDefinition","set","_flush","pendingDefinitions","elementsWithStableDefinitions","elementsWithPendingDefinitions","pendingElements","shift","pendingUpgradableElements","deferred","whenDefined","reject","prior","some","d","polyfillWrapFlushCallback","outer","inner","flush","Document_createElement","createElement","Document_createElementNS","createElementNS","Document_importNode","Document_prepend","Document_append","DocumentFragment_prepend","DocumentFragment","DocumentFragment_append","Node_cloneNode","cloneNode","Node_appendChild","appendChild","Node_insertBefore","insertBefore","Node_removeChild","removeChild","Node_replaceChild","replaceChild","Node_textContent","getOwnPropertyDescriptor","Element_attachShadow","Element","Element_innerHTML","Element_getAttribute","Element_setAttribute","setAttribute","Element_removeAttribute","removeAttribute","Element_getAttributeNS","getAttributeNS","Element_setAttributeNS","setAttributeNS","Element_removeAttributeNS","removeAttributeNS","Element_insertAdjacentElement","Element_insertAdjacentHTML","Element_prepend","Element_append","Element_before","Element_after","Element_replaceWith","Element_remove","HTMLElement","HTMLElement_innerHTML","HTMLElement_insertAdjacentElement","HTMLElement_insertAdjacentHTML","$jscompDefaultExport","AlreadyConstructedMarker","builtIn","appendPrependPatch","builtInMethod","flattenedNodes","connectedElements","nodes","apply","prepend","append","priorCustomElements","$jscompDefaultExport$$module$src$Patch$Native.Document_createElement.call","setPrototypeOf","lastIndex","$jscompDefaultExport$$module$src$Patch$Native.HTMLElement","defineProperty","writable","configurable","enumerable","result","deep","clone","$jscompDefaultExport$$module$src$Patch$Native.Document_importNode.call","NS_HTML","$jscompDefaultExport$$module$src$Patch$Native.Document_createElementNS.call","PatchParentNode","$jscompDefaultExport$$module$src$Patch$Native.Document_prepend","$jscompDefaultExport$$module$src$Patch$Native.Document_append","PatchDocument","$jscompDefaultExport$$module$src$Patch$Native.DocumentFragment_prepend","$jscompDefaultExport$$module$src$Patch$Native.DocumentFragment_append","patch_textContent","baseDescriptor","assignedValue","TEXT_NODE","removedNodes","childNodes","childNodesLength","Array","refNode","insertedNodes","slice","$jscompDefaultExport$$module$src$Patch$Native.Node_insertBefore.call","nativeResult","nodeWasConnected","$jscompDefaultExport$$module$src$Patch$Native.Node_appendChild.call","$jscompDefaultExport$$module$src$Patch$Native.Node_cloneNode.call","$jscompDefaultExport$$module$src$Patch$Native.Node_removeChild.call","nodeToInsert","nodeToRemove","$jscompDefaultExport$$module$src$Patch$Native.Node_replaceChild.call","nodeToInsertWasConnected","thisIsConnected","$jscompDefaultExport$$module$src$Patch$Native.Node_textContent","$jscompDefaultExport$$module$src$Patch$Native.Node_textContent.get","parts","textContent","join","createTextNode","PatchNode","patch_innerHTML","htmlString","removedElements","patch_insertAdjacentElement","baseMethod","position","wasConnected","insertedElement","patch_insertAdjacentHTML","upgradeNodesInRange","end","text","toLowerCase","marker","previousSibling","lastChild","String","$jscompDefaultExport$$module$src$Patch$Native.Element_attachShadow","init","$jscompDefaultExport$$module$src$Patch$Native.Element_attachShadow.call","$jscompDefaultExport$$module$src$Patch$Native.Element_innerHTML","$jscompDefaultExport$$module$src$Patch$Native.Element_innerHTML.get","$jscompDefaultExport$$module$src$Patch$Native.HTMLElement_innerHTML","$jscompDefaultExport$$module$src$Patch$Native.HTMLElement_innerHTML.get","innerHTML","isTemplate","content","rawElement","namespaceURI","container","$jscompDefaultExport$$module$src$Patch$Native.Element_setAttribute.call","$jscompDefaultExport$$module$src$Patch$Native.Element_getAttribute.call","$jscompDefaultExport$$module$src$Patch$Native.Element_setAttributeNS.call","$jscompDefaultExport$$module$src$Patch$Native.Element_getAttributeNS.call","$jscompDefaultExport$$module$src$Patch$Native.Element_removeAttribute.call","$jscompDefaultExport$$module$src$Patch$Native.Element_removeAttributeNS.call","$jscompDefaultExport$$module$src$Patch$Native.HTMLElement_insertAdjacentElement","$jscompDefaultExport$$module$src$Patch$Native.Element_insertAdjacentElement","console","warn","$jscompDefaultExport$$module$src$Patch$Native.HTMLElement_insertAdjacentHTML","$jscompDefaultExport$$module$src$Patch$Native.Element_insertAdjacentHTML","$jscompDefaultExport$$module$src$Patch$Native.Element_prepend","$jscompDefaultExport$$module$src$Patch$Native.Element_append","beforeAfterPatch","$jscompDefaultExport$$module$src$Patch$Native.Element_before","$jscompDefaultExport$$module$src$Patch$Native.Element_after","$jscompDefaultExport$$module$src$Patch$Native.Element_replaceWith","$jscompDefaultExport$$module$src$Patch$Native.Element_remove","PatchChildNode","PatchElement","customElements"],"mappings":"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","file":"custom-elements.min.582aa19c.map","sourceRoot":"../../packages/demo","sourcesContent":["const reservedTagList = new Set([\n  'annotation-xml',\n  'color-profile',\n  'font-face',\n  'font-face-src',\n  'font-face-uri',\n  'font-face-format',\n  'font-face-name',\n  'missing-glyph',\n]);\n\n/**\n * @param {string} localName\n * @returns {boolean}\n */\nexport function isValidCustomElementName(localName) {\n  const reserved = reservedTagList.has(localName);\n  const validForm = /^[a-z][.0-9_a-z]*-[\\-.0-9_a-z]*$/.test(localName);\n  return !reserved && validForm;\n}\n\n/**\n * @private\n * @param {!Node} node\n * @return {boolean}\n */\nexport function isConnected(node) {\n  // Use `Node#isConnected`, if defined.\n  const nativeValue = node.isConnected;\n  if (nativeValue !== undefined) {\n    return nativeValue;\n  }\n\n  /** @type {?Node|undefined} */\n  let current = node;\n  while (current && !(current.__CE_isImportDocument || current instanceof Document)) {\n    current = current.parentNode || (window.ShadowRoot && current instanceof ShadowRoot ? current.host : undefined);\n  }\n  return !!(current && (current.__CE_isImportDocument || current instanceof Document));\n}\n\n/**\n * @param {!Node} root\n * @param {!Node} start\n * @return {?Node}\n */\nfunction nextSiblingOrAncestorSibling(root, start) {\n  let node = start;\n  while (node && node !== root && !node.nextSibling) {\n    node = node.parentNode;\n  }\n  return (!node || node === root) ? null : node.nextSibling;\n}\n\n/**\n * @param {!Node} root\n * @param {!Node} start\n * @return {?Node}\n */\nfunction nextNode(root, start) {\n  return start.firstChild ? start.firstChild : nextSiblingOrAncestorSibling(root, start);\n}\n\n/**\n * @param {!Node} root\n * @param {!function(!Element)} callback\n * @param {!Set<Node>=} visitedImports\n */\nexport function walkDeepDescendantElements(root, callback, visitedImports = new Set()) {\n  let node = root;\n  while (node) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      const element = /** @type {!Element} */(node);\n\n      callback(element);\n\n      const localName = element.localName;\n      if (localName === 'link' && element.getAttribute('rel') === 'import') {\n        // If this import (polyfilled or not) has it's root node available,\n        // walk it.\n        const importNode = /** @type {!Node} */ (element.import);\n        if (importNode instanceof Node && !visitedImports.has(importNode)) {\n          // Prevent multiple walks of the same import root.\n          visitedImports.add(importNode);\n\n          for (let child = importNode.firstChild; child; child = child.nextSibling) {\n            walkDeepDescendantElements(child, callback, visitedImports);\n          }\n        }\n\n        // Ignore descendants of import links to prevent attempting to walk the\n        // elements created by the HTML Imports polyfill that we just walked\n        // above.\n        node = nextSiblingOrAncestorSibling(root, element);\n        continue;\n      } else if (localName === 'template') {\n        // Ignore descendants of templates. There shouldn't be any descendants\n        // because they will be moved into `.content` during construction in\n        // browsers that support template but, in case they exist and are still\n        // waiting to be moved by a polyfill, they will be ignored.\n        node = nextSiblingOrAncestorSibling(root, element);\n        continue;\n      }\n\n      // Walk shadow roots.\n      const shadowRoot = element.__CE_shadowRoot;\n      if (shadowRoot) {\n        for (let child = shadowRoot.firstChild; child; child = child.nextSibling) {\n          walkDeepDescendantElements(child, callback, visitedImports);\n        }\n      }\n    }\n\n    node = nextNode(root, node);\n  }\n}\n\n/**\n * Used to suppress Closure's \"Modifying the prototype is only allowed if the\n * constructor is in the same scope\" warning without using\n * `@suppress {newCheckTypes, duplicate}` because `newCheckTypes` is too broad.\n *\n * @param {!Object} destination\n * @param {string} name\n * @param {*} value\n */\nexport function setPropertyUnchecked(destination, name, value) {\n  destination[name] = value;\n}\n","import * as Utilities from './Utilities.js';\nimport CEState from './CustomElementState.js';\n\nexport default class CustomElementInternals {\n  constructor() {\n    /** @type {!Map<string, !CustomElementDefinition>} */\n    this._localNameToDefinition = new Map();\n\n    /** @type {!Map<!Function, !CustomElementDefinition>} */\n    this._constructorToDefinition = new Map();\n\n    /** @type {!Array<!function(!Node)>} */\n    this._patches = [];\n\n    /** @type {boolean} */\n    this._hasPatches = false;\n  }\n\n  /**\n   * @param {string} localName\n   * @param {!CustomElementDefinition} definition\n   */\n  setDefinition(localName, definition) {\n    this._localNameToDefinition.set(localName, definition);\n    this._constructorToDefinition.set(definition.constructorFunction, definition);\n  }\n\n  /**\n   * @param {string} localName\n   * @return {!CustomElementDefinition|undefined}\n   */\n  localNameToDefinition(localName) {\n    return this._localNameToDefinition.get(localName);\n  }\n\n  /**\n   * @param {!Function} constructor\n   * @return {!CustomElementDefinition|undefined}\n   */\n  constructorToDefinition(constructor) {\n    return this._constructorToDefinition.get(constructor);\n  }\n\n  /**\n   * @param {!function(!Node)} listener\n   */\n  addPatch(listener) {\n    this._hasPatches = true;\n    this._patches.push(listener);\n  }\n\n  /**\n   * @param {!Node} node\n   */\n  patchTree(node) {\n    if (!this._hasPatches) return;\n\n    Utilities.walkDeepDescendantElements(node, element => this.patch(element));\n  }\n\n  /**\n   * @param {!Node} node\n   */\n  patch(node) {\n    if (!this._hasPatches) return;\n\n    if (node.__CE_patched) return;\n    node.__CE_patched = true;\n\n    for (let i = 0; i < this._patches.length; i++) {\n      this._patches[i](node);\n    }\n  }\n\n  /**\n   * @param {!Node} root\n   */\n  connectTree(root) {\n    const elements = [];\n\n    Utilities.walkDeepDescendantElements(root, element => elements.push(element));\n\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.__CE_state === CEState.custom) {\n        this.connectedCallback(element);\n      } else {\n        this.upgradeElement(element);\n      }\n    }\n  }\n\n  /**\n   * @param {!Node} root\n   */\n  disconnectTree(root) {\n    const elements = [];\n\n    Utilities.walkDeepDescendantElements(root, element => elements.push(element));\n\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.__CE_state === CEState.custom) {\n        this.disconnectedCallback(element);\n      }\n    }\n  }\n\n  /**\n   * Upgrades all uncustomized custom elements at and below a root node for\n   * which there is a definition. When custom element reaction callbacks are\n   * assumed to be called synchronously (which, by the current DOM / HTML spec\n   * definitions, they are *not*), callbacks for both elements customized\n   * synchronously by the parser and elements being upgraded occur in the same\n   * relative order.\n   *\n   * NOTE: This function, when used to simulate the construction of a tree that\n   * is already created but not customized (i.e. by the parser), does *not*\n   * prevent the element from reading the 'final' (true) state of the tree. For\n   * example, the element, during truly synchronous parsing / construction would\n   * see that it contains no children as they have not yet been inserted.\n   * However, this function does not modify the tree, the element will\n   * (incorrectly) have children. Additionally, self-modification restrictions\n   * for custom element constructors imposed by the DOM spec are *not* enforced.\n   *\n   *\n   * The following nested list shows the steps extending down from the HTML\n   * spec's parsing section that cause elements to be synchronously created and\n   * upgraded:\n   *\n   * The \"in body\" insertion mode:\n   * https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n   * - Switch on token:\n   *   .. other cases ..\n   *   -> Any other start tag\n   *      - [Insert an HTML element](below) for the token.\n   *\n   * Insert an HTML element:\n   * https://html.spec.whatwg.org/multipage/syntax.html#insert-an-html-element\n   * - Insert a foreign element for the token in the HTML namespace:\n   *   https://html.spec.whatwg.org/multipage/syntax.html#insert-a-foreign-element\n   *   - Create an element for a token:\n   *     https://html.spec.whatwg.org/multipage/syntax.html#create-an-element-for-the-token\n   *     - Will execute script flag is true?\n   *       - (Element queue pushed to the custom element reactions stack.)\n   *     - Create an element:\n   *       https://dom.spec.whatwg.org/#concept-create-element\n   *       - Sync CE flag is true?\n   *         - Constructor called.\n   *         - Self-modification restrictions enforced.\n   *       - Sync CE flag is false?\n   *         - (Upgrade reaction enqueued.)\n   *     - Attributes appended to element.\n   *       (`attributeChangedCallback` reactions enqueued.)\n   *     - Will execute script flag is true?\n   *       - (Element queue popped from the custom element reactions stack.\n   *         Reactions in the popped stack are invoked.)\n   *   - (Element queue pushed to the custom element reactions stack.)\n   *   - Insert the element:\n   *     https://dom.spec.whatwg.org/#concept-node-insert\n   *     - Shadow-including descendants are connected. During parsing\n   *       construction, there are no shadow-*excluding* descendants.\n   *       However, the constructor may have validly attached a shadow\n   *       tree to itself and added descendants to that shadow tree.\n   *       (`connectedCallback` reactions enqueued.)\n   *   - (Element queue popped from the custom element reactions stack.\n   *     Reactions in the popped stack are invoked.)\n   *\n   * @param {!Node} root\n   * @param {{\n   *   visitedImports: (!Set<!Node>|undefined),\n   *   upgrade: (!function(!Element)|undefined),\n   * }=} options\n   */\n  patchAndUpgradeTree(root, options = {}) {\n    const visitedImports = options.visitedImports || new Set();\n    const upgrade = options.upgrade || (element => this.upgradeElement(element));\n\n    const elements = [];\n\n    const gatherElements = element => {\n      if (element.localName === 'link' && element.getAttribute('rel') === 'import') {\n        // The HTML Imports polyfill sets a descendant element of the link to\n        // the `import` property, specifically this is *not* a Document.\n        const importNode = /** @type {?Node} */ (element.import);\n\n        if (importNode instanceof Node) {\n          importNode.__CE_isImportDocument = true;\n          // Connected links are associated with the registry.\n          importNode.__CE_hasRegistry = true;\n        }\n\n        if (importNode && importNode.readyState === 'complete') {\n          importNode.__CE_documentLoadHandled = true;\n        } else {\n          // If this link's import root is not available, its contents can't be\n          // walked. Wait for 'load' and walk it when it's ready.\n          element.addEventListener('load', () => {\n            const importNode = /** @type {!Node} */ (element.import);\n\n            if (importNode.__CE_documentLoadHandled) return;\n            importNode.__CE_documentLoadHandled = true;\n\n            // Clone the `visitedImports` set that was populated sync during\n            // the `patchAndUpgradeTree` call that caused this 'load' handler to\n            // be added. Then, remove *this* link's import node so that we can\n            // walk that import again, even if it was partially walked later\n            // during the same `patchAndUpgradeTree` call.\n            const clonedVisitedImports = new Set(visitedImports);\n            clonedVisitedImports.delete(importNode);\n\n            this.patchAndUpgradeTree(importNode, {visitedImports: clonedVisitedImports, upgrade});\n          });\n        }\n      } else {\n        elements.push(element);\n      }\n    };\n\n    // `walkDeepDescendantElements` populates (and internally checks against)\n    // `visitedImports` when traversing a loaded import.\n    Utilities.walkDeepDescendantElements(root, gatherElements, visitedImports);\n\n    if (this._hasPatches) {\n      for (let i = 0; i < elements.length; i++) {\n        this.patch(elements[i]);\n      }\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      upgrade(elements[i]);\n    }\n  }\n\n  /**\n   * @param {!HTMLElement} element\n   */\n  upgradeElement(element) {\n    const currentState = element.__CE_state;\n    if (currentState !== undefined) return;\n\n    // Prevent elements created in documents without a browsing context from\n    // upgrading.\n    //\n    // https://html.spec.whatwg.org/multipage/custom-elements.html#look-up-a-custom-element-definition\n    //   \"If document does not have a browsing context, return null.\"\n    //\n    // https://html.spec.whatwg.org/multipage/window-object.html#dom-document-defaultview\n    //   \"The defaultView IDL attribute of the Document interface, on getting,\n    //   must return this Document's browsing context's WindowProxy object, if\n    //   this Document has an associated browsing context, or null otherwise.\"\n    const ownerDocument = element.ownerDocument;\n    if (\n      !ownerDocument.defaultView &&\n      !(ownerDocument.__CE_isImportDocument && ownerDocument.__CE_hasRegistry)\n    ) return;\n\n    const definition = this.localNameToDefinition(element.localName);\n    if (!definition) return;\n\n    definition.constructionStack.push(element);\n\n    const constructor = definition.constructorFunction;\n    try {\n      try {\n        let result = new (constructor)();\n        if (result !== element) {\n          throw new Error('The custom element constructor did not produce the element being upgraded.');\n        }\n      } finally {\n        definition.constructionStack.pop();\n      }\n    } catch (e) {\n      element.__CE_state = CEState.failed;\n      throw e;\n    }\n\n    element.__CE_state = CEState.custom;\n    element.__CE_definition = definition;\n\n    if (definition.attributeChangedCallback) {\n      const observedAttributes = definition.observedAttributes;\n      for (let i = 0; i < observedAttributes.length; i++) {\n        const name = observedAttributes[i];\n        const value = element.getAttribute(name);\n        if (value !== null) {\n          this.attributeChangedCallback(element, name, null, value, null);\n        }\n      }\n    }\n\n    if (Utilities.isConnected(element)) {\n      this.connectedCallback(element);\n    }\n  }\n\n  /**\n   * @param {!Element} element\n   */\n  connectedCallback(element) {\n    const definition = element.__CE_definition;\n    if (definition.connectedCallback) {\n      definition.connectedCallback.call(element);\n    }\n  }\n\n  /**\n   * @param {!Element} element\n   */\n  disconnectedCallback(element) {\n    const definition = element.__CE_definition;\n    if (definition.disconnectedCallback) {\n      definition.disconnectedCallback.call(element);\n    }\n  }\n\n  /**\n   * @param {!Element} element\n   * @param {string} name\n   * @param {?string} oldValue\n   * @param {?string} newValue\n   * @param {?string} namespace\n   */\n  attributeChangedCallback(element, name, oldValue, newValue, namespace) {\n    const definition = element.__CE_definition;\n    if (\n      definition.attributeChangedCallback &&\n      definition.observedAttributes.indexOf(name) > -1\n    ) {\n      definition.attributeChangedCallback.call(element, name, oldValue, newValue, namespace);\n    }\n  }\n}\n","/**\n * @enum {number}\n */\nconst CustomElementState = {\n  custom: 1,\n  failed: 2,\n};\n\nexport default CustomElementState;\n","import CustomElementInternals from './CustomElementInternals.js';\n\nexport default class DocumentConstructionObserver {\n  constructor(internals, doc) {\n    /**\n     * @type {!CustomElementInternals}\n     */\n    this._internals = internals;\n\n    /**\n     * @type {!Document}\n     */\n    this._document = doc;\n\n    /**\n     * @type {MutationObserver|undefined}\n     */\n    this._observer = undefined;\n\n\n    // Simulate tree construction for all currently accessible nodes in the\n    // document.\n    this._internals.patchAndUpgradeTree(this._document);\n\n    if (this._document.readyState === 'loading') {\n      this._observer = new MutationObserver(this._handleMutations.bind(this));\n\n      // Nodes created by the parser are given to the observer *before* the next\n      // task runs. Inline scripts are run in a new task. This means that the\n      // observer will be able to handle the newly parsed nodes before the inline\n      // script is run.\n      this._observer.observe(this._document, {\n        childList: true,\n        subtree: true,\n      });\n    }\n  }\n\n  disconnect() {\n    if (this._observer) {\n      this._observer.disconnect();\n    }\n  }\n\n  /**\n   * @param {!Array<!MutationRecord>} mutations\n   */\n  _handleMutations(mutations) {\n    // Once the document's `readyState` is 'interactive' or 'complete', all new\n    // nodes created within that document will be the result of script and\n    // should be handled by patching.\n    const readyState = this._document.readyState;\n    if (readyState === 'interactive' || readyState === 'complete') {\n      this.disconnect();\n    }\n\n    for (let i = 0; i < mutations.length; i++) {\n      const addedNodes = mutations[i].addedNodes;\n      for (let j = 0; j < addedNodes.length; j++) {\n        const node = addedNodes[j];\n        this._internals.patchAndUpgradeTree(node);\n      }\n    }\n  }\n}\n","import CustomElementInternals from './CustomElementInternals.js';\nimport DocumentConstructionObserver from './DocumentConstructionObserver.js';\nimport Deferred from './Deferred.js';\nimport * as Utilities from './Utilities.js';\n\n/**\n * @unrestricted\n */\nexport default class CustomElementRegistry {\n\n  /**\n   * @param {!CustomElementInternals} internals\n   */\n  constructor(internals) {\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this._elementDefinitionIsRunning = false;\n\n    /**\n     * @private\n     * @type {!CustomElementInternals}\n     */\n    this._internals = internals;\n\n    /**\n     * @private\n     * @type {!Map<string, !Deferred<undefined>>}\n     */\n    this._whenDefinedDeferred = new Map();\n\n    /**\n     * The default flush callback triggers the document walk synchronously.\n     * @private\n     * @type {!Function}\n     */\n    this._flushCallback = fn => fn();\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this._flushPending = false;\n\n    /**\n     * @private\n     * @type {!Array<!CustomElementDefinition>}\n     */\n    this._pendingDefinitions = [];\n\n    /**\n     * @private\n     * @type {!DocumentConstructionObserver}\n     */\n    this._documentConstructionObserver = new DocumentConstructionObserver(internals, document);\n  }\n\n  /**\n   * @param {string} localName\n   * @param {!Function} constructor\n   */\n  define(localName, constructor) {\n    if (!(constructor instanceof Function)) {\n      throw new TypeError('Custom element constructors must be functions.');\n    }\n\n    if (!Utilities.isValidCustomElementName(localName)) {\n      throw new SyntaxError(`The element name '${localName}' is not valid.`);\n    }\n\n    if (this._internals.localNameToDefinition(localName)) {\n      throw new Error(`A custom element with name '${localName}' has already been defined.`);\n    }\n\n    if (this._elementDefinitionIsRunning) {\n      throw new Error('A custom element is already being defined.');\n    }\n    this._elementDefinitionIsRunning = true;\n\n    let connectedCallback;\n    let disconnectedCallback;\n    let adoptedCallback;\n    let attributeChangedCallback;\n    let observedAttributes;\n    try {\n      /** @type {!Object} */\n      const prototype = constructor.prototype;\n      if (!(prototype instanceof Object)) {\n        throw new TypeError('The custom element constructor\\'s prototype is not an object.');\n      }\n\n      function getCallback(name) {\n        const callbackValue = prototype[name];\n        if (callbackValue !== undefined && !(callbackValue instanceof Function)) {\n          throw new Error(`The '${name}' callback must be a function.`);\n        }\n        return callbackValue;\n      }\n\n      connectedCallback = getCallback('connectedCallback');\n      disconnectedCallback = getCallback('disconnectedCallback');\n      adoptedCallback = getCallback('adoptedCallback');\n      attributeChangedCallback = getCallback('attributeChangedCallback');\n      observedAttributes = constructor['observedAttributes'] || [];\n    } catch (e) {\n      return;\n    } finally {\n      this._elementDefinitionIsRunning = false;\n    }\n\n    const definition = {\n      localName,\n      constructorFunction: constructor,\n      connectedCallback,\n      disconnectedCallback,\n      adoptedCallback,\n      attributeChangedCallback,\n      observedAttributes,\n      constructionStack: [],\n    };\n\n    this._internals.setDefinition(localName, definition);\n    this._pendingDefinitions.push(definition);\n\n    // If we've already called the flush callback and it hasn't called back yet,\n    // don't call it again.\n    if (!this._flushPending) {\n      this._flushPending = true;\n      this._flushCallback(() => this._flush());\n    }\n  }\n\n  upgrade(element) {\n    this._internals.patchAndUpgradeTree(element);\n  }\n\n  _flush() {\n    // If no new definitions were defined, don't attempt to flush. This could\n    // happen if a flush callback keeps the function it is given and calls it\n    // multiple times.\n    if (this._flushPending === false) return;\n    this._flushPending = false;\n\n    const pendingDefinitions = this._pendingDefinitions;\n\n    /**\n     * Unupgraded elements with definitions that were defined *before* the last\n     * flush, in document order.\n     * @type {!Array<!HTMLElement>}\n     */\n    const elementsWithStableDefinitions = [];\n\n    /**\n     * A map from `localName`s of definitions that were defined *after* the last\n     * flush to unupgraded elements matching that definition, in document order.\n     * @type {!Map<string, !Array<!HTMLElement>>}\n     */\n    const elementsWithPendingDefinitions = new Map();\n    for (let i = 0; i < pendingDefinitions.length; i++) {\n      elementsWithPendingDefinitions.set(pendingDefinitions[i].localName, []);\n    }\n\n    this._internals.patchAndUpgradeTree(document, {\n      upgrade: element => {\n        // Ignore the element if it has already upgraded or failed to upgrade.\n        if (element.__CE_state !== undefined) return;\n\n        const localName = element.localName;\n\n        // If there is an applicable pending definition for the element, add the\n        // element to the list of elements to be upgraded with that definition.\n        const pendingElements = elementsWithPendingDefinitions.get(localName);\n        if (pendingElements) {\n          pendingElements.push(element);\n        // If there is *any other* applicable definition for the element, add it\n        // to the list of elements with stable definitions that need to be upgraded.\n        } else if (this._internals.localNameToDefinition(localName)) {\n          elementsWithStableDefinitions.push(element);\n        }\n      },\n    });\n\n    // Upgrade elements with 'stable' definitions first.\n    for (let i = 0; i < elementsWithStableDefinitions.length; i++) {\n      this._internals.upgradeElement(elementsWithStableDefinitions[i]);\n    }\n\n    // Upgrade elements with 'pending' definitions in the order they were defined.\n    while (pendingDefinitions.length > 0) {\n      const definition = pendingDefinitions.shift();\n      const localName = definition.localName;\n\n      // Attempt to upgrade all applicable elements.\n      const pendingUpgradableElements = elementsWithPendingDefinitions.get(definition.localName);\n      for (let i = 0; i < pendingUpgradableElements.length; i++) {\n        this._internals.upgradeElement(pendingUpgradableElements[i]);\n      }\n\n      // Resolve any promises created by `whenDefined` for the definition.\n      const deferred = this._whenDefinedDeferred.get(localName);\n      if (deferred) {\n        deferred.resolve(undefined);\n      }\n    }\n  }\n\n  /**\n   * @param {string} localName\n   * @return {Function|undefined}\n   */\n  get(localName) {\n    const definition = this._internals.localNameToDefinition(localName);\n    if (definition) {\n      return definition.constructorFunction;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * @param {string} localName\n   * @return {!Promise<undefined>}\n   */\n  whenDefined(localName) {\n    if (!Utilities.isValidCustomElementName(localName)) {\n      return Promise.reject(new SyntaxError(`'${localName}' is not a valid custom element name.`));\n    }\n\n    const prior = this._whenDefinedDeferred.get(localName);\n    if (prior) {\n      return prior.toPromise();\n    }\n\n    const deferred = new Deferred();\n    this._whenDefinedDeferred.set(localName, deferred);\n\n    const definition = this._internals.localNameToDefinition(localName);\n    // Resolve immediately only if the given local name has a definition *and*\n    // the full document walk to upgrade elements with that local name has\n    // already happened.\n    if (definition && !this._pendingDefinitions.some(d => d.localName === localName)) {\n      deferred.resolve(undefined);\n    }\n\n    return deferred.toPromise();\n  }\n\n  polyfillWrapFlushCallback(outer) {\n    this._documentConstructionObserver.disconnect();\n    const inner = this._flushCallback;\n    this._flushCallback = flush => outer(() => inner(flush));\n  }\n}\n\n// Closure compiler exports.\nwindow['CustomElementRegistry'] = CustomElementRegistry;\nCustomElementRegistry.prototype['define'] = CustomElementRegistry.prototype.define;\nCustomElementRegistry.prototype['upgrade'] = CustomElementRegistry.prototype.upgrade;\nCustomElementRegistry.prototype['get'] = CustomElementRegistry.prototype.get;\nCustomElementRegistry.prototype['whenDefined'] = CustomElementRegistry.prototype.whenDefined;\nCustomElementRegistry.prototype['polyfillWrapFlushCallback'] = CustomElementRegistry.prototype.polyfillWrapFlushCallback;\n","/**\n * @template T\n */\nexport default class Deferred {\n  constructor() {\n    /**\n     * @private\n     * @type {T|undefined}\n     */\n    this._value = undefined;\n\n    /**\n     * @private\n     * @type {Function|undefined}\n     */\n    this._resolve = undefined;\n\n    /**\n     * @private\n     * @type {!Promise<T>}\n     */\n    this._promise = new Promise(resolve => {\n      this._resolve = resolve;\n\n      if (this._value) {\n        resolve(this._value);\n      }\n    });\n  }\n\n  /**\n   * @param {T} value\n   */\n  resolve(value) {\n    if (this._value) {\n      throw new Error('Already resolved.');\n    }\n\n    this._value = value;\n\n    if (this._resolve) {\n      this._resolve(value);\n    }\n  }\n\n  /**\n   * @return {!Promise<T>}\n   */\n  toPromise() {\n    return this._promise;\n  }\n}\n","export default {\n  Document_createElement: window.Document.prototype.createElement,\n  Document_createElementNS: window.Document.prototype.createElementNS,\n  Document_importNode: window.Document.prototype.importNode,\n  Document_prepend: window.Document.prototype['prepend'],\n  Document_append: window.Document.prototype['append'],\n  DocumentFragment_prepend: window.DocumentFragment.prototype['prepend'],\n  DocumentFragment_append: window.DocumentFragment.prototype['append'],\n  Node_cloneNode: window.Node.prototype.cloneNode,\n  Node_appendChild: window.Node.prototype.appendChild,\n  Node_insertBefore: window.Node.prototype.insertBefore,\n  Node_removeChild: window.Node.prototype.removeChild,\n  Node_replaceChild: window.Node.prototype.replaceChild,\n  Node_textContent: Object.getOwnPropertyDescriptor(window.Node.prototype, 'textContent'),\n  Element_attachShadow: window.Element.prototype['attachShadow'],\n  Element_innerHTML: Object.getOwnPropertyDescriptor(window.Element.prototype, 'innerHTML'),\n  Element_getAttribute: window.Element.prototype.getAttribute,\n  Element_setAttribute: window.Element.prototype.setAttribute,\n  Element_removeAttribute: window.Element.prototype.removeAttribute,\n  Element_getAttributeNS: window.Element.prototype.getAttributeNS,\n  Element_setAttributeNS: window.Element.prototype.setAttributeNS,\n  Element_removeAttributeNS: window.Element.prototype.removeAttributeNS,\n  Element_insertAdjacentElement: window.Element.prototype['insertAdjacentElement'],\n  Element_insertAdjacentHTML: window.Element.prototype['insertAdjacentHTML'],\n  Element_prepend: window.Element.prototype['prepend'],\n  Element_append: window.Element.prototype['append'],\n  Element_before: window.Element.prototype['before'],\n  Element_after: window.Element.prototype['after'],\n  Element_replaceWith: window.Element.prototype['replaceWith'],\n  Element_remove: window.Element.prototype['remove'],\n  HTMLElement: window.HTMLElement,\n  HTMLElement_innerHTML: Object.getOwnPropertyDescriptor(window.HTMLElement.prototype, 'innerHTML'),\n  HTMLElement_insertAdjacentElement: window.HTMLElement.prototype['insertAdjacentElement'],\n  HTMLElement_insertAdjacentHTML: window.HTMLElement.prototype['insertAdjacentHTML'],\n};\n","/**\n * This class exists only to work around Closure's lack of a way to describe\n * singletons. It represents the 'already constructed marker' used in custom\n * element construction stacks.\n *\n * https://html.spec.whatwg.org/#concept-already-constructed-marker\n * @extends AlreadyConstructedMarkerType\n */\nclass AlreadyConstructedMarker {}\n\nexport default new AlreadyConstructedMarker();\n","import CustomElementInternals from '../../CustomElementInternals.js';\nimport * as Utilities from '../../Utilities.js';\n\n/**\n * @typedef {{\n *   prepend: !function(...(!Node|string)),\n  *  append: !function(...(!Node|string)),\n * }}\n */\nlet ParentNodeNativeMethods;\n\n/**\n * @param {!CustomElementInternals} internals\n * @param {!Object} destination\n * @param {!ParentNodeNativeMethods} builtIn\n */\nexport default function(internals, destination, builtIn) {\n  /**\n   * @param {!function(...(!Node|string))} builtInMethod\n   * @return {!function(...(!Node|string))}\n   */\n  function appendPrependPatch(builtInMethod) {\n    return function(...nodes) {\n      /**\n       * A copy of `nodes`, with any DocumentFragment replaced by its children.\n       * @type {!Array<!Node>}\n       */\n      const flattenedNodes = [];\n\n      /**\n       * Elements in `nodes` that were connected before this call.\n       * @type {!Array<!Node>}\n       */\n      const connectedElements = [];\n\n      for (var i = 0; i < nodes.length; i++) {\n        const node = nodes[i];\n\n        if (node instanceof Element && Utilities.isConnected(node)) {\n          connectedElements.push(node);\n        }\n\n        if (node instanceof DocumentFragment) {\n          for (let child = node.firstChild; child; child = child.nextSibling) {\n            flattenedNodes.push(child);\n          }\n        } else {\n          flattenedNodes.push(node);\n        }\n      }\n\n      builtInMethod.apply(this, nodes);\n\n      for (let i = 0; i < connectedElements.length; i++) {\n        internals.disconnectTree(connectedElements[i]);\n      }\n\n      if (Utilities.isConnected(this)) {\n        for (let i = 0; i < flattenedNodes.length; i++) {\n          const node = flattenedNodes[i];\n          if (node instanceof Element) {\n            internals.connectTree(node);\n          }\n        }\n      }\n    };\n  }\n\n  if (builtIn.prepend !== undefined) {\n    Utilities.setPropertyUnchecked(destination, 'prepend', appendPrependPatch(builtIn.prepend));\n  }\n\n  if (builtIn.append !== undefined) {\n    Utilities.setPropertyUnchecked(destination, 'append', appendPrependPatch(builtIn.append));\n  }\n};\n","/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\nimport CustomElementInternals from './CustomElementInternals.js';\nimport CustomElementRegistry from './CustomElementRegistry.js';\n\nimport PatchHTMLElement from './Patch/HTMLElement.js';\nimport PatchDocument from './Patch/Document.js';\nimport PatchDocumentFragment from './Patch/DocumentFragment.js';\nimport PatchNode from './Patch/Node.js';\nimport PatchElement from './Patch/Element.js';\n\nconst priorCustomElements = window['customElements'];\n\nif (!priorCustomElements ||\n     priorCustomElements['forcePolyfill'] ||\n     (typeof priorCustomElements['define'] != 'function') ||\n     (typeof priorCustomElements['get'] != 'function')) {\n  /** @type {!CustomElementInternals} */\n  const internals = new CustomElementInternals();\n\n  PatchHTMLElement(internals);\n  PatchDocument(internals);\n  PatchDocumentFragment(internals);\n  PatchNode(internals);\n  PatchElement(internals);\n\n  // The main document is always associated with the registry.\n  document.__CE_hasRegistry = true;\n\n  /** @type {!CustomElementRegistry} */\n  const customElements = new CustomElementRegistry(internals);\n\n  Object.defineProperty(window, 'customElements', {\n    configurable: true,\n    enumerable: true,\n    value: customElements,\n  });\n}\n","import Native from './Native.js';\nimport CustomElementInternals from '../CustomElementInternals.js';\nimport CEState from '../CustomElementState.js';\nimport AlreadyConstructedMarker from '../AlreadyConstructedMarker.js';\n\n/**\n * @param {!CustomElementInternals} internals\n */\nexport default function(internals) {\n  window['HTMLElement'] = (function() {\n    /**\n     * @type {function(new: HTMLElement): !HTMLElement}\n     */\n    function HTMLElement() {\n      // This should really be `new.target` but `new.target` can't be emulated\n      // in ES5. Assuming the user keeps the default value of the constructor's\n      // prototype's `constructor` property, this is equivalent.\n      const constructor = /** @type {!Function} */ (this.constructor);\n\n      const definition = internals.constructorToDefinition(constructor);\n      if (!definition) {\n        throw new Error('The custom element being constructed was not registered with `customElements`.');\n      }\n\n      const constructionStack = definition.constructionStack;\n\n      if (constructionStack.length === 0) {\n        const element = /** @type {!HTMLElement} */ (Native.Document_createElement.call(document, definition.localName));\n        Object.setPrototypeOf(element, constructor.prototype);\n        element.__CE_state = CEState.custom;\n        element.__CE_definition = definition;\n        internals.patch(element);\n        return element;\n      }\n\n      const lastIndex = constructionStack.length - 1;\n      const element = constructionStack[lastIndex];\n      if (element === AlreadyConstructedMarker) {\n        throw new Error('The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.');\n      }\n      const toConstructElement = /** @type {!HTMLElement} */ (element);\n      constructionStack[lastIndex] = AlreadyConstructedMarker;\n\n      Object.setPrototypeOf(toConstructElement, constructor.prototype);\n      internals.patch(toConstructElement);\n\n      return toConstructElement;\n    }\n\n    HTMLElement.prototype = Native.HTMLElement.prototype;\n    // Safari 9 has `writable: false` on the propertyDescriptor\n    // Make it writable so that TypeScript can patch up the\n    // constructor in the ES5 compiled code.\n    Object.defineProperty(HTMLElement.prototype, 'constructor', {\n      writable: true,\n      configurable: true,\n      enumerable: false,\n      value: HTMLElement\n    });\n\n    return HTMLElement;\n  })();\n};\n","import Native from './Native.js';\nimport CustomElementInternals from '../CustomElementInternals.js';\nimport * as Utilities from '../Utilities.js';\n\nimport PatchParentNode from './Interface/ParentNode.js';\n\n/**\n * @param {!CustomElementInternals} internals\n */\nexport default function(internals) {\n  Utilities.setPropertyUnchecked(Document.prototype, 'createElement',\n    /**\n     * @this {Document}\n     * @param {string} localName\n     * @return {!Element}\n     */\n    function(localName) {\n      // Only create custom elements if this document is associated with the registry.\n      if (this.__CE_hasRegistry) {\n        const definition = internals.localNameToDefinition(localName);\n        if (definition) {\n          return new (definition.constructorFunction)();\n        }\n      }\n\n      const result = /** @type {!Element} */\n        (Native.Document_createElement.call(this, localName));\n      internals.patch(result);\n      return result;\n    });\n\n  Utilities.setPropertyUnchecked(Document.prototype, 'importNode',\n    /**\n     * @this {Document}\n     * @param {!Node} node\n     * @param {boolean=} deep\n     * @return {!Node}\n     */\n    function(node, deep) {\n      const clone = /** @type {!Node} */ (Native.Document_importNode.call(this, node, !!deep));\n      // Only create custom elements if this document is associated with the registry.\n      if (!this.__CE_hasRegistry) {\n        internals.patchTree(clone);\n      } else {\n        internals.patchAndUpgradeTree(clone);\n      }\n      return clone;\n    });\n\n  const NS_HTML = \"http://www.w3.org/1999/xhtml\";\n\n  Utilities.setPropertyUnchecked(Document.prototype, 'createElementNS',\n    /**\n     * @this {Document}\n     * @param {?string} namespace\n     * @param {string} localName\n     * @return {!Element}\n     */\n    function(namespace, localName) {\n      // Only create custom elements if this document is associated with the registry.\n      if (this.__CE_hasRegistry && (namespace === null || namespace === NS_HTML)) {\n        const definition = internals.localNameToDefinition(localName);\n        if (definition) {\n          return new (definition.constructorFunction)();\n        }\n      }\n\n      const result = /** @type {!Element} */\n        (Native.Document_createElementNS.call(this, namespace, localName));\n      internals.patch(result);\n      return result;\n    });\n\n  PatchParentNode(internals, Document.prototype, {\n    prepend: Native.Document_prepend,\n    append: Native.Document_append,\n  });\n};\n","import CustomElementInternals from '../CustomElementInternals.js';\nimport Native from './Native.js';\nimport PatchParentNode from './Interface/ParentNode.js';\n\n/**\n * @param {!CustomElementInternals} internals\n */\nexport default function(internals) {\n  PatchParentNode(internals, DocumentFragment.prototype, {\n    prepend: Native.DocumentFragment_prepend,\n    append: Native.DocumentFragment_append,\n  });\n};\n","import Native from './Native.js';\nimport CustomElementInternals from '../CustomElementInternals.js';\nimport * as Utilities from '../Utilities.js';\n\n/**\n * @param {!CustomElementInternals} internals\n */\nexport default function(internals) {\n  // `Node#nodeValue` is implemented on `Attr`.\n  // `Node#textContent` is implemented on `Attr`, `Element`.\n\n  Utilities.setPropertyUnchecked(Node.prototype, 'insertBefore',\n    /**\n     * @this {Node}\n     * @param {!Node} node\n     * @param {?Node} refNode\n     * @return {!Node}\n     */\n    function(node, refNode) {\n      if (node instanceof DocumentFragment) {\n        const insertedNodes = Array.prototype.slice.apply(node.childNodes);\n        const nativeResult = Native.Node_insertBefore.call(this, node, refNode);\n\n        // DocumentFragments can't be connected, so `disconnectTree` will never\n        // need to be called on a DocumentFragment's children after inserting it.\n\n        if (Utilities.isConnected(this)) {\n          for (let i = 0; i < insertedNodes.length; i++) {\n            internals.connectTree(insertedNodes[i]);\n          }\n        }\n\n        return nativeResult;\n      }\n\n      const nodeWasConnected = Utilities.isConnected(node);\n      const nativeResult = Native.Node_insertBefore.call(this, node, refNode);\n\n      if (nodeWasConnected) {\n        internals.disconnectTree(node);\n      }\n\n      if (Utilities.isConnected(this)) {\n        internals.connectTree(node);\n      }\n\n      return nativeResult;\n    });\n\n  Utilities.setPropertyUnchecked(Node.prototype, 'appendChild',\n    /**\n     * @this {Node}\n     * @param {!Node} node\n     * @return {!Node}\n     */\n    function(node) {\n      if (node instanceof DocumentFragment) {\n        const insertedNodes = Array.prototype.slice.apply(node.childNodes);\n        const nativeResult = Native.Node_appendChild.call(this, node);\n\n        // DocumentFragments can't be connected, so `disconnectTree` will never\n        // need to be called on a DocumentFragment's children after inserting it.\n\n        if (Utilities.isConnected(this)) {\n          for (let i = 0; i < insertedNodes.length; i++) {\n            internals.connectTree(insertedNodes[i]);\n          }\n        }\n\n        return nativeResult;\n      }\n\n      const nodeWasConnected = Utilities.isConnected(node);\n      const nativeResult = Native.Node_appendChild.call(this, node);\n\n      if (nodeWasConnected) {\n        internals.disconnectTree(node);\n      }\n\n      if (Utilities.isConnected(this)) {\n        internals.connectTree(node);\n      }\n\n      return nativeResult;\n    });\n\n  Utilities.setPropertyUnchecked(Node.prototype, 'cloneNode',\n    /**\n     * @this {Node}\n     * @param {boolean=} deep\n     * @return {!Node}\n     */\n    function(deep) {\n      const clone = Native.Node_cloneNode.call(this, !!deep);\n      // Only create custom elements if this element's owner document is\n      // associated with the registry.\n      if (!this.ownerDocument.__CE_hasRegistry) {\n        internals.patchTree(clone);\n      } else {\n        internals.patchAndUpgradeTree(clone);\n      }\n      return clone;\n    });\n\n  Utilities.setPropertyUnchecked(Node.prototype, 'removeChild',\n    /**\n     * @this {Node}\n     * @param {!Node} node\n     * @return {!Node}\n     */\n    function(node) {\n      const nodeWasConnected = Utilities.isConnected(node);\n      const nativeResult = Native.Node_removeChild.call(this, node);\n\n      if (nodeWasConnected) {\n        internals.disconnectTree(node);\n      }\n\n      return nativeResult;\n    });\n\n  Utilities.setPropertyUnchecked(Node.prototype, 'replaceChild',\n    /**\n     * @this {Node}\n     * @param {!Node} nodeToInsert\n     * @param {!Node} nodeToRemove\n     * @return {!Node}\n     */\n    function(nodeToInsert, nodeToRemove) {\n      if (nodeToInsert instanceof DocumentFragment) {\n        const insertedNodes = Array.prototype.slice.apply(nodeToInsert.childNodes);\n        const nativeResult = Native.Node_replaceChild.call(this, nodeToInsert, nodeToRemove);\n\n        // DocumentFragments can't be connected, so `disconnectTree` will never\n        // need to be called on a DocumentFragment's children after inserting it.\n\n        if (Utilities.isConnected(this)) {\n          internals.disconnectTree(nodeToRemove);\n          for (let i = 0; i < insertedNodes.length; i++) {\n            internals.connectTree(insertedNodes[i]);\n          }\n        }\n\n        return nativeResult;\n      }\n\n      const nodeToInsertWasConnected = Utilities.isConnected(nodeToInsert);\n      const nativeResult = Native.Node_replaceChild.call(this, nodeToInsert, nodeToRemove);\n      const thisIsConnected = Utilities.isConnected(this);\n\n      if (thisIsConnected) {\n        internals.disconnectTree(nodeToRemove);\n      }\n\n      if (nodeToInsertWasConnected) {\n        internals.disconnectTree(nodeToInsert);\n      }\n\n      if (thisIsConnected) {\n        internals.connectTree(nodeToInsert);\n      }\n\n      return nativeResult;\n    });\n\n\n  function patch_textContent(destination, baseDescriptor) {\n    Object.defineProperty(destination, 'textContent', {\n      enumerable: baseDescriptor.enumerable,\n      configurable: true,\n      get: baseDescriptor.get,\n      set: /** @this {Node} */ function(assignedValue) {\n        // If this is a text node then there are no nodes to disconnect.\n        if (this.nodeType === Node.TEXT_NODE) {\n          baseDescriptor.set.call(this, assignedValue);\n          return;\n        }\n\n        let removedNodes = undefined;\n        // Checking for `firstChild` is faster than reading `childNodes.length`\n        // to compare with 0.\n        if (this.firstChild) {\n          // Using `childNodes` is faster than `children`, even though we only\n          // care about elements.\n          const childNodes = this.childNodes;\n          const childNodesLength = childNodes.length;\n          if (childNodesLength > 0 && Utilities.isConnected(this)) {\n            // Copying an array by iterating is faster than using slice.\n            removedNodes = new Array(childNodesLength);\n            for (let i = 0; i < childNodesLength; i++) {\n              removedNodes[i] = childNodes[i];\n            }\n          }\n        }\n\n        baseDescriptor.set.call(this, assignedValue);\n\n        if (removedNodes) {\n          for (let i = 0; i < removedNodes.length; i++) {\n            internals.disconnectTree(removedNodes[i]);\n          }\n        }\n      },\n    });\n  }\n\n  if (Native.Node_textContent && Native.Node_textContent.get) {\n    patch_textContent(Node.prototype, Native.Node_textContent);\n  } else {\n    internals.addPatch(function(element) {\n      patch_textContent(element, {\n        enumerable: true,\n        configurable: true,\n        // NOTE: This implementation of the `textContent` getter assumes that\n        // text nodes' `textContent` getter will not be patched.\n        get: /** @this {Node} */ function() {\n          /** @type {!Array<string>} */\n          const parts = [];\n\n          for (let i = 0; i < this.childNodes.length; i++) {\n            parts.push(this.childNodes[i].textContent);\n          }\n\n          return parts.join('');\n        },\n        set: /** @this {Node} */ function(assignedValue) {\n          while (this.firstChild) {\n            Native.Node_removeChild.call(this, this.firstChild);\n          }\n          Native.Node_appendChild.call(this, document.createTextNode(assignedValue));\n        },\n      });\n    });\n  }\n};\n","import Native from './Native.js';\nimport CustomElementInternals from '../CustomElementInternals.js';\nimport CEState from '../CustomElementState.js';\nimport * as Utilities from '../Utilities.js';\n\nimport PatchParentNode from './Interface/ParentNode.js';\nimport PatchChildNode from './Interface/ChildNode.js';\n\n/**\n * @param {!CustomElementInternals} internals\n */\nexport default function(internals) {\n  if (Native.Element_attachShadow) {\n    Utilities.setPropertyUnchecked(Element.prototype, 'attachShadow',\n      /**\n       * @this {Element}\n       * @param {!{mode: string}} init\n       * @return {ShadowRoot}\n       */\n      function(init) {\n        const shadowRoot = Native.Element_attachShadow.call(this, init);\n        this.__CE_shadowRoot = shadowRoot;\n        return shadowRoot;\n      });\n  }\n\n\n  function patch_innerHTML(destination, baseDescriptor) {\n    Object.defineProperty(destination, 'innerHTML', {\n      enumerable: baseDescriptor.enumerable,\n      configurable: true,\n      get: baseDescriptor.get,\n      set: /** @this {Element} */ function(htmlString) {\n        const isConnected = Utilities.isConnected(this);\n\n        // NOTE: In IE11, when using the native `innerHTML` setter, all nodes\n        // that were previously descendants of the context element have all of\n        // their children removed as part of the set - the entire subtree is\n        // 'disassembled'. This work around walks the subtree *before* using the\n        // native setter.\n        /** @type {!Array<!Element>|undefined} */\n        let removedElements = undefined;\n        if (isConnected) {\n          removedElements = [];\n          Utilities.walkDeepDescendantElements(this, element => {\n            if (element !== this) {\n              removedElements.push(element);\n            }\n          });\n        }\n\n        baseDescriptor.set.call(this, htmlString);\n\n        if (removedElements) {\n          for (let i = 0; i < removedElements.length; i++) {\n            const element = removedElements[i];\n            if (element.__CE_state === CEState.custom) {\n              internals.disconnectedCallback(element);\n            }\n          }\n        }\n\n        // Only create custom elements if this element's owner document is\n        // associated with the registry.\n        if (!this.ownerDocument.__CE_hasRegistry) {\n          internals.patchTree(this);\n        } else {\n          internals.patchAndUpgradeTree(this);\n        }\n        return htmlString;\n      },\n    });\n  }\n\n  if (Native.Element_innerHTML && Native.Element_innerHTML.get) {\n    patch_innerHTML(Element.prototype, Native.Element_innerHTML);\n  } else if (Native.HTMLElement_innerHTML && Native.HTMLElement_innerHTML.get) {\n    patch_innerHTML(HTMLElement.prototype, Native.HTMLElement_innerHTML);\n  } else {\n\n    internals.addPatch(function(element) {\n      patch_innerHTML(element, {\n        enumerable: true,\n        configurable: true,\n        // Implements getting `innerHTML` by performing an unpatched `cloneNode`\n        // of the element and returning the resulting element's `innerHTML`.\n        // TODO: Is this too expensive?\n        get: /** @this {Element} */ function() {\n          return Native.Node_cloneNode.call(this, true).innerHTML;\n        },\n        // Implements setting `innerHTML` by creating an unpatched element,\n        // setting `innerHTML` of that element and replacing the target\n        // element's children with those of the unpatched element.\n        set: /** @this {Element} */ function(assignedValue) {\n          // NOTE: re-route to `content` for `template` elements.\n          // We need to do this because `template.appendChild` does not\n          // route into `template.content`.\n          const isTemplate = (this.localName === 'template');\n          /** @type {!Node} */\n          const content = isTemplate ? (/** @type {!HTMLTemplateElement} */\n            (this)).content : this;\n          /** @type {!Node} */\n          const rawElement = Native.Document_createElementNS.call(document,\n              this.namespaceURI, this.localName);\n          rawElement.innerHTML = assignedValue;\n\n          while (content.childNodes.length > 0) {\n            Native.Node_removeChild.call(content, content.childNodes[0]);\n          }\n          const container = isTemplate ? rawElement.content : rawElement;\n          while (container.childNodes.length > 0) {\n            Native.Node_appendChild.call(content, container.childNodes[0]);\n          }\n        },\n      });\n    });\n  }\n\n\n  Utilities.setPropertyUnchecked(Element.prototype, 'setAttribute',\n    /**\n     * @this {Element}\n     * @param {string} name\n     * @param {string} newValue\n     */\n    function(name, newValue) {\n      // Fast path for non-custom elements.\n      if (this.__CE_state !== CEState.custom) {\n        return Native.Element_setAttribute.call(this, name, newValue);\n      }\n\n      const oldValue = Native.Element_getAttribute.call(this, name);\n      Native.Element_setAttribute.call(this, name, newValue);\n      newValue = Native.Element_getAttribute.call(this, name);\n      internals.attributeChangedCallback(this, name, oldValue, newValue, null);\n    });\n\n  Utilities.setPropertyUnchecked(Element.prototype, 'setAttributeNS',\n    /**\n     * @this {Element}\n     * @param {?string} namespace\n     * @param {string} name\n     * @param {string} newValue\n     */\n    function(namespace, name, newValue) {\n      // Fast path for non-custom elements.\n      if (this.__CE_state !== CEState.custom) {\n        return Native.Element_setAttributeNS.call(this, namespace, name, newValue);\n      }\n\n      const oldValue = Native.Element_getAttributeNS.call(this, namespace, name);\n      Native.Element_setAttributeNS.call(this, namespace, name, newValue);\n      newValue = Native.Element_getAttributeNS.call(this, namespace, name);\n      internals.attributeChangedCallback(this, name, oldValue, newValue, namespace);\n    });\n\n  Utilities.setPropertyUnchecked(Element.prototype, 'removeAttribute',\n    /**\n     * @this {Element}\n     * @param {string} name\n     */\n    function(name) {\n      // Fast path for non-custom elements.\n      if (this.__CE_state !== CEState.custom) {\n        return Native.Element_removeAttribute.call(this, name);\n      }\n\n      const oldValue = Native.Element_getAttribute.call(this, name);\n      Native.Element_removeAttribute.call(this, name);\n      if (oldValue !== null) {\n        internals.attributeChangedCallback(this, name, oldValue, null, null);\n      }\n    });\n\n  Utilities.setPropertyUnchecked(Element.prototype, 'removeAttributeNS',\n    /**\n     * @this {Element}\n     * @param {?string} namespace\n     * @param {string} name\n     */\n    function(namespace, name) {\n      // Fast path for non-custom elements.\n      if (this.__CE_state !== CEState.custom) {\n        return Native.Element_removeAttributeNS.call(this, namespace, name);\n      }\n\n      const oldValue = Native.Element_getAttributeNS.call(this, namespace, name);\n      Native.Element_removeAttributeNS.call(this, namespace, name);\n      // In older browsers, `Element#getAttributeNS` may return the empty string\n      // instead of null if the attribute does not exist. For details, see;\n      // https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS#Notes\n      const newValue = Native.Element_getAttributeNS.call(this, namespace, name);\n      if (oldValue !== newValue) {\n        internals.attributeChangedCallback(this, name, oldValue, newValue, namespace);\n      }\n    });\n\n\n  function patch_insertAdjacentElement(destination, baseMethod) {\n    Utilities.setPropertyUnchecked(destination, 'insertAdjacentElement',\n      /**\n       * @this {Element}\n       * @param {string} position\n       * @param {!Element} element\n       * @return {?Element}\n       */\n      function(position, element) {\n        const wasConnected = Utilities.isConnected(element);\n        const insertedElement = /** @type {!Element} */\n          (baseMethod.call(this, position, element));\n\n        if (wasConnected) {\n          internals.disconnectTree(element);\n        }\n\n        if (Utilities.isConnected(insertedElement)) {\n          internals.connectTree(element);\n        }\n        return insertedElement;\n      });\n  }\n\n  if (Native.HTMLElement_insertAdjacentElement) {\n    patch_insertAdjacentElement(HTMLElement.prototype, Native.HTMLElement_insertAdjacentElement);\n  } else if (Native.Element_insertAdjacentElement) {\n    patch_insertAdjacentElement(Element.prototype, Native.Element_insertAdjacentElement);\n  } else {\n    console.warn('Custom Elements: `Element#insertAdjacentElement` was not patched.');\n  }\n\n\n  function patch_insertAdjacentHTML(destination, baseMethod) {\n    /**\n     * Patches and upgrades all nodes which are siblings between `start`\n     * (inclusive) and `end` (exclusive). If `end` is `null`, then all siblings\n     * following `start` will be patched and upgraded.\n     * @param {!Node} start\n     * @param {?Node} end\n     */\n    function upgradeNodesInRange(start, end) {\n      const nodes = [];\n      for (let node = start; node !== end; node = node.nextSibling) {\n        nodes.push(node);\n      }\n      for (let i = 0; i < nodes.length; i++) {\n        internals.patchAndUpgradeTree(nodes[i]);\n      }\n    }\n\n    Utilities.setPropertyUnchecked(destination, 'insertAdjacentHTML',\n      /**\n       * @this {Element}\n       * @param {string} position\n       * @param {string} text\n       */\n      function(position, text) {\n        position = position.toLowerCase();\n\n        if (position === \"beforebegin\") {\n          const marker = this.previousSibling;\n          baseMethod.call(this, position, text);\n          upgradeNodesInRange(marker || /** @type {!Node} */ (this.parentNode.firstChild), this);\n        } else if (position === \"afterbegin\") {\n          const marker = this.firstChild;\n          baseMethod.call(this, position, text);\n          upgradeNodesInRange(/** @type {!Node} */ (this.firstChild), marker);\n        } else if (position === \"beforeend\") {\n          const marker = this.lastChild;\n          baseMethod.call(this, position, text);\n          upgradeNodesInRange(marker || /** @type {!Node} */ (this.firstChild), null);\n        } else if (position === \"afterend\") {\n          const marker = this.nextSibling;\n          baseMethod.call(this, position, text);\n          upgradeNodesInRange(/** @type {!Node} */ (this.nextSibling), marker);\n        } else {\n          throw new SyntaxError(`The value provided (${String(position)}) is ` +\n            \"not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.\");\n        }\n      });\n  }\n\n  if (Native.HTMLElement_insertAdjacentHTML) {\n    patch_insertAdjacentHTML(HTMLElement.prototype, Native.HTMLElement_insertAdjacentHTML);\n  } else if (Native.Element_insertAdjacentHTML) {\n    patch_insertAdjacentHTML(Element.prototype, Native.Element_insertAdjacentHTML);\n  } else {\n    console.warn('Custom Elements: `Element#insertAdjacentHTML` was not patched.');\n  }\n\n\n  PatchParentNode(internals, Element.prototype, {\n    prepend: Native.Element_prepend,\n    append: Native.Element_append,\n  });\n\n  PatchChildNode(internals, Element.prototype, {\n    before: Native.Element_before,\n    after: Native.Element_after,\n    replaceWith: Native.Element_replaceWith,\n    remove: Native.Element_remove,\n  });\n};\n","import CustomElementInternals from '../../CustomElementInternals.js';\nimport * as Utilities from '../../Utilities.js';\n\n/**\n * @typedef {{\n *   before: !function(...(!Node|string)),\n *   after: !function(...(!Node|string)),\n *   replaceWith: !function(...(!Node|string)),\n *   remove: !function(),\n * }}\n */\nlet ChildNodeNativeMethods;\n\n/**\n * @param {!CustomElementInternals} internals\n * @param {!Object} destination\n * @param {!ChildNodeNativeMethods} builtIn\n */\nexport default function(internals, destination, builtIn) {\n  /**\n   * @param {!function(...(!Node|string))} builtInMethod\n   * @return {!function(...(!Node|string))}\n   */\n  function beforeAfterPatch(builtInMethod) {\n    return function(...nodes) {\n      /**\n       * A copy of `nodes`, with any DocumentFragment replaced by its children.\n       * @type {!Array<!Node>}\n       */\n      const flattenedNodes = [];\n\n      /**\n       * Elements in `nodes` that were connected before this call.\n       * @type {!Array<!Node>}\n       */\n      const connectedElements = [];\n\n      for (var i = 0; i < nodes.length; i++) {\n        const node = nodes[i];\n\n        if (node instanceof Element && Utilities.isConnected(node)) {\n          connectedElements.push(node);\n        }\n\n        if (node instanceof DocumentFragment) {\n          for (let child = node.firstChild; child; child = child.nextSibling) {\n            flattenedNodes.push(child);\n          }\n        } else {\n          flattenedNodes.push(node);\n        }\n      }\n\n      builtInMethod.apply(this, nodes);\n\n      for (let i = 0; i < connectedElements.length; i++) {\n        internals.disconnectTree(connectedElements[i]);\n      }\n\n      if (Utilities.isConnected(this)) {\n        for (let i = 0; i < flattenedNodes.length; i++) {\n          const node = flattenedNodes[i];\n          if (node instanceof Element) {\n            internals.connectTree(node);\n          }\n        }\n      }\n    };\n  }\n\n  if (builtIn.before !== undefined) {\n    Utilities.setPropertyUnchecked(destination, 'before', beforeAfterPatch(builtIn.before));\n  }\n\n  if (builtIn.before !== undefined) {\n    Utilities.setPropertyUnchecked(destination, 'after', beforeAfterPatch(builtIn.after));\n  }\n\n  if (builtIn.replaceWith !== undefined) {\n    Utilities.setPropertyUnchecked(destination, 'replaceWith',\n      /**\n       * @param {...(!Node|string)} nodes\n       */\n      function(...nodes) {\n        /**\n         * A copy of `nodes`, with any DocumentFragment replaced by its children.\n         * @type {!Array<!Node|string>}\n         */\n        const flattenedNodes = [];\n\n        /**\n         * Elements in `nodes` that were connected before this call.\n         * @type {!Array<!Node>}\n         */\n        const connectedElements = [];\n\n        for (var i = 0; i < nodes.length; i++) {\n          const node = nodes[i];\n\n          if (node instanceof Element && Utilities.isConnected(node)) {\n            connectedElements.push(node);\n          }\n\n          if (node instanceof DocumentFragment) {\n            for (let child = node.firstChild; child; child = child.nextSibling) {\n              flattenedNodes.push(child);\n            }\n          } else {\n            flattenedNodes.push(node);\n          }\n        }\n\n        const wasConnected = Utilities.isConnected(this);\n\n        builtIn.replaceWith.apply(this, nodes);\n\n        for (let i = 0; i < connectedElements.length; i++) {\n          internals.disconnectTree(connectedElements[i]);\n        }\n\n        if (wasConnected) {\n          internals.disconnectTree(this);\n          for (let i = 0; i < flattenedNodes.length; i++) {\n            const node = flattenedNodes[i];\n            if (node instanceof Element) {\n              internals.connectTree(node);\n            }\n          }\n        }\n      });\n    }\n\n  if (builtIn.remove !== undefined) {\n    Utilities.setPropertyUnchecked(destination, 'remove',\n      function() {\n        const wasConnected = Utilities.isConnected(this);\n\n        builtIn.remove.call(this);\n\n        if (wasConnected) {\n          internals.disconnectTree(this);\n        }\n      });\n  }\n};\n"]}